$ yarn add --dev hardhat
// to install hardhat

$ yarn hardhat 
// to create project

// Linting

Solhint is solidity linter, it came with older version.
can be added using hardhat plugins

// Compiling
will throw error since, we have not imported Aggregator contract
of Chainlink which we imported for our use
 import the package then for Compiling
 $ yarn add --dev @Chainlink/contracts or something like that
 $ yarn hardhat compile // for compiling.

// Deploying
    using hardhat-deploy package

    why are we using it?
    This hardhat plugin adds a mechanism to deploy contracts to 
    any network, keeping track of them and replicating the same 
    environment for testing.

    It also adds a mechanism to associate names to addresses, so 
    test and deployment scripts can be reconfigured by simply 
    changing the address a name points to, allowing different 
    configurations per network. This also results in much clearer 
    tests and deployment scripts (no more accounts[0] in your code).

// deleting deploy scripts and making deploy folder
 also installing hardhat-ethers as told in hardhat-deploy installation
 readme.

$ yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers

now we will number the deploy scripts, as they will work numerically

// creating deployFunc function, creating namedAccounts in config 

// Mocking & helper-hardhat-config: 10:21:05

// need for a mock?
// to replicate pricefeed or other complex object behavior on our 
// local chain, instead of running test chain always which takes a
// lot of time, we can just simulate the same behavior on our local 
// net using mocks

// creating price converter mock, since the address we were using 
// was for rinkeby test network

changed FundMe and PriceConverter such that they can adapt to 
any network's priceFeed Aggregator object

in helper-hardhat-config js, we write all the conditions for 
the code to select which address to pick for priceFeed object.

after that add the networkConfig to 01-deploy 

now making 00-deploy-mocks for local chain network 

for that we have to create a mock contract, and we will create it 
in contracts/test folder since we are basically going to use it 
for testing.

but thank to the developers, I've already got mock file in the package
itself so, I don't have to worry to much, just need to import a mock

can also, add several versions of solidity in hardhat-config 

use of tags to only run certain file,
-----> added at the bottom of 00-deploy-mock 
more reading required
to run => $ yarn hardhat deploy --tags mocks

10:52:36 => now completing 01-deploy file and executing finally using 
$ yarn hardhat deploy 

running both 00-deploy-mocks and 01-deploy-fund-me successfully

what is happening is, that 01-deploy will absolutely be deployed 
since it is the main file, but the 00-deploy-mock file will only 
be deployed when we are on hardhat or local hardhat chain.

// running for hardhat local blockchain
$ yarn hardhat node

10:52:52 => UTILS FOLDER 

going to run for rinkeby network, before that we want to 
add the function for verify, which we will add in 'utils' folder 

10:55:46 => Testnet Demo 
    cleaning hardhat.config and adding blockConfirmations to 
    rinkeby networks 

11:00:11 => Solidity Style Guide

Order of file:
    1. Pragma statements
    2. Import statements
    3. Interfaces
    4. Libraries
    5. Contracts 

Inside each contract:
    Type declaration
    State variables
    Events 
    Modifiers
    Functions

11:05 => creating documentation natspec.... see later or as per need.

// Functions Order  
    constructor
    receive
    fallback
    external
    public
    internal 
    private
    view/pure

11:09:13 -> Testing Fund Me 
    creating folders staging and unit 

    unit tests are done locally
    - local hardhat 
    - forked hardhat, talk later on this
    staging tests are done on a testnet (LAST STOP!!!)

    $ yarn hardhat test // to run tests 
    $ yarn hardhat coverage // to see portions that tests cover.

=> first writing unit tests

=> stuck on test 1 due to inability to copy code properly

commenting out fallback and recieve, so that I won't have to 
write tests about them and will probably be covered later.

// to run an individual test
$ yarn hardhat test --grep "amount funded"

testing withdraw function
while testing we follow, 

Arrange
Act
Assert

11:37:18 => can also use console.log() in .sol files by importing,
	import "hardhat/console.sol";

11:39:47 => testing withdrawing funds for multiple funders

earlier we had connected our fundMe contract with the deployer,
now we need to connect the contract with the diff accounts, 
we will be funding it with using a for loop

The for loop is starting with i=1 since 0th account is the deployer.